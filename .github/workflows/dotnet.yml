# .github/workflows/main.yml
name: EcommerceMicroservices CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'docker-compose*.yml'
  pull_request:
    branches: [ "main", "develop" ]

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  CATALOG_IMAGE: ${{ github.repository }}/catalog-api
  BASKET_IMAGE: ${{ github.repository }}/basket-api

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore Dependencies
        run: dotnet restore src/EcommerceMicroservices.sln

      - name: Build Solution
        run: dotnet build src/EcommerceMicroservices.sln --configuration Release --no-restore

      - name: Run Tests
        run: dotnet test src/EcommerceMicroservices.sln --configuration Release --no-build

  docker:
    name: Build and Push Docker Images
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Catalog API
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Services/Catalog.API/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.CATALOG_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.CATALOG_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Basket API
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Services/Basket.API/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BASKET_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.BASKET_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.deployment-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Docker Compose
        run: |
          sed -i "s|image:.*catalogapi.*|image: ${{ env.REGISTRY }}/${{ env.CATALOG_IMAGE }}:${{ github.sha }}|g" src/docker-compose.yml
          sed -i "s|image:.*basketapi.*|image: ${{ env.REGISTRY }}/${{ env.BASKET_IMAGE }}:${{ github.sha }}|g" src/docker-compose.yml

      - name: Deploy to Development
        id: deploy
        run: |
          echo "Deploying to development environment"
          # Add your deployment commands here
          echo "deployment-url=https://dev-api.yourapp.com" >> $GITHUB_OUTPUT

  deploy-prod:
    name: Deploy to Production
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Docker Compose
        run: |
          sed -i "s|image:.*catalogapi.*|image: ${{ env.REGISTRY }}/${{ env.CATALOG_IMAGE }}:${{ github.sha }}|g" src/docker-compose.yml
          sed -i "s|image:.*basketapi.*|image: ${{ env.REGISTRY }}/${{ env.BASKET_IMAGE }}:${{ github.sha }}|g" src/docker-compose.yml

      - name: Deploy to Production
        id: deploy
        run: |
          echo "Deploying to production environment"
          # Add your deployment commands here
          echo "deployment-url=https://api.yourapp.com" >> $GITHUB_OUTPUT
